// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: events.proto

package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import time "time"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Metadata is a common event metadata
type Metadata struct {
	// Index is a monotonicaly incremented index in the event sequence
	Index int64 `protobuf:"varint,1,opt,name=Index,proto3" json:"ei"`
	// Type is the event type
	Type string `protobuf:"bytes,2,opt,name=Type,proto3" json:"event"`
	// ID is a unique event identifier
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"uid,omitempty"`
	// Code is a unique event code
	Code string `protobuf:"bytes,4,opt,name=Code,proto3" json:"code,omitempty"`
	// Time is event time
	Time                 time.Time `protobuf:"bytes,5,opt,name=Time,stdtime" json:"time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(dst, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

// SesssionMetadata is a common session event metadata
type SessionMetadata struct {
	// Namespace is a namespace of the session event
	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"namespace,omitempty"`
	// SessionID is a unique UUID of the session.
	SessionID string `protobuf:"bytes,2,opt,name=SessionID,proto3" json:"sid"`
	// Login is OS login
	Login string `protobuf:"bytes,3,opt,name=Login,proto3" json:"login"`
	// User is teleport user name
	User                 string   `protobuf:"bytes,4,opt,name=User,proto3" json:"user"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionMetadata) Reset()         { *m = SessionMetadata{} }
func (m *SessionMetadata) String() string { return proto.CompactTextString(m) }
func (*SessionMetadata) ProtoMessage()    {}
func (*SessionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{1}
}
func (m *SessionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionMetadata.Merge(dst, src)
}
func (m *SessionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *SessionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_SessionMetadata proto.InternalMessageInfo

// Server is a server information
type ServerMetadata struct {
	// ServerID is the UUID of the server the session occurred on.
	ServerID string `protobuf:"bytes,1,opt,name=ServerID,proto3" json:"server_id"`
	// ServerHostname is the hostname of the server the session occurred on.
	ServerHostname string `protobuf:"bytes,2,opt,name=ServerHostname,proto3" json:"server_hostname,omitempty"`
	// ServerLabels are the labels (static and dynamic) of the server the
	// session occurred on.
	ServerLabels         map[string]string `protobuf:"bytes,3,rep,name=ServerLabels" json:"server_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServerMetadata) Reset()         { *m = ServerMetadata{} }
func (m *ServerMetadata) String() string { return proto.CompactTextString(m) }
func (*ServerMetadata) ProtoMessage()    {}
func (*ServerMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{2}
}
func (m *ServerMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServerMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMetadata.Merge(dst, src)
}
func (m *ServerMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ServerMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMetadata proto.InternalMessageInfo

// Connection contains connection infro
type ConnectionMetadata struct {
	// LocalAddr is a target address on the host
	LocalAddr string `protobuf:"bytes,1,opt,name=LocalAddr,proto3" json:"addr.local,omitempty"`
	// RemoteAddr is a client (user's) address
	RemoteAddr           string   `protobuf:"bytes,2,opt,name=RemoteAddr,proto3" json:"addr.remote,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectionMetadata) Reset()         { *m = ConnectionMetadata{} }
func (m *ConnectionMetadata) String() string { return proto.CompactTextString(m) }
func (*ConnectionMetadata) ProtoMessage()    {}
func (*ConnectionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{3}
}
func (m *ConnectionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ConnectionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectionMetadata.Merge(dst, src)
}
func (m *ConnectionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ConnectionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectionMetadata proto.InternalMessageInfo

// SessionStart is a session start event
type SessionStart struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// SessionMetadata is a common event metadata
	SessionMetadata `protobuf:"bytes,2,opt,name=Session,embedded=Session" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,3,opt,name=Server,embedded=Server" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,4,opt,name=Connection,embedded=Connection" json:""`
	// TerminalSize is expressed as 'W:H'
	TerminalSize         string   `protobuf:"bytes,5,opt,name=TerminalSize,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionStart) Reset()         { *m = SessionStart{} }
func (m *SessionStart) String() string { return proto.CompactTextString(m) }
func (*SessionStart) ProtoMessage()    {}
func (*SessionStart) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{4}
}
func (m *SessionStart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionStart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionStart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionStart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionStart.Merge(dst, src)
}
func (m *SessionStart) XXX_Size() int {
	return m.Size()
}
func (m *SessionStart) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionStart.DiscardUnknown(m)
}

var xxx_messageInfo_SessionStart proto.InternalMessageInfo

// SessionPrint event happens every time a write occurs to
// temirnal I/O during a session
type SessionPrint struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// ChunkIndex is a monotonicaly incremented index for ordering print events
	ChunkIndex int64 `protobuf:"varint,2,opt,name=ChunkIndex,proto3" json:"ci"`
	// Data is data transferred, it is not marshaled to JSON format
	Data []byte `protobuf:"bytes,3,opt,name=Data,proto3" json:"-"`
	// Bytes says how many bytes have been written into the session
	// during "print" event
	Bytes int64 `protobuf:"varint,4,opt,name=Bytes,proto3" json:"bytes"`
	// DelayMilliseconds is the delay in milliseconds from the start of the session
	DelayMilliseconds int64 `protobuf:"varint,5,opt,name=DelayMilliseconds,proto3" json:"ms"`
	// Offset is the offset in bytes in the session file
	Offset               int64    `protobuf:"varint,6,opt,name=Offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionPrint) Reset()         { *m = SessionPrint{} }
func (m *SessionPrint) String() string { return proto.CompactTextString(m) }
func (*SessionPrint) ProtoMessage()    {}
func (*SessionPrint) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{5}
}
func (m *SessionPrint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionPrint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionPrint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionPrint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionPrint.Merge(dst, src)
}
func (m *SessionPrint) XXX_Size() int {
	return m.Size()
}
func (m *SessionPrint) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionPrint.DiscardUnknown(m)
}

var xxx_messageInfo_SessionPrint proto.InternalMessageInfo

// Resize means that some user resized PTY on the client
type Resize struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// SessionMetadata is a common event metadata
	SessionMetadata `protobuf:"bytes,2,opt,name=Session,embedded=Session" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// TerminalSize is expressed as 'W:H'
	TerminalSize         string   `protobuf:"bytes,5,opt,name=TerminalSize,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resize) Reset()         { *m = Resize{} }
func (m *Resize) String() string { return proto.CompactTextString(m) }
func (*Resize) ProtoMessage()    {}
func (*Resize) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{6}
}
func (m *Resize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Resize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resize.Merge(dst, src)
}
func (m *Resize) XXX_Size() int {
	return m.Size()
}
func (m *Resize) XXX_DiscardUnknown() {
	xxx_messageInfo_Resize.DiscardUnknown(m)
}

var xxx_messageInfo_Resize proto.InternalMessageInfo

// SessionEnd is a session end event
type SessionEnd struct {
	// Metadata is a common event metadata
	Metadata `protobuf:"bytes,1,opt,name=Metadata,embedded=Metadata" json:""`
	// SessionMetadata is a common event metadata
	SessionMetadata `protobuf:"bytes,2,opt,name=Session,embedded=Session" json:""`
	// ConnectionMetadata holds information about the connection
	ConnectionMetadata `protobuf:"bytes,3,opt,name=Connection,embedded=Connection" json:""`
	// ServerMetadata is a common server metadata
	ServerMetadata `protobuf:"bytes,4,opt,name=Server,embedded=Server" json:""`
	// EnhancedRecording is used to indicate if the recording was an
	// enhanced recording or not.
	EnhancedRecording bool `protobuf:"varint,5,opt,name=EnhancedRecording,proto3" json:"enhanced_recording"`
	// Interactive is used to indicate if the session was interactive
	// (has PTY attached) or not (exec session).
	Interactive bool `protobuf:"varint,6,opt,name=Interactive,proto3" json:"interactive"`
	// Participants is a list of participants in the session.
	Participants         []string `protobuf:"bytes,7,rep,name=Participants" json:"participants"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionEnd) Reset()         { *m = SessionEnd{} }
func (m *SessionEnd) String() string { return proto.CompactTextString(m) }
func (*SessionEnd) ProtoMessage()    {}
func (*SessionEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_7c1964c2be3ba0f3, []int{7}
}
func (m *SessionEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SessionEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionEnd.Merge(dst, src)
}
func (m *SessionEnd) XXX_Size() int {
	return m.Size()
}
func (m *SessionEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionEnd.DiscardUnknown(m)
}

var xxx_messageInfo_SessionEnd proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Metadata)(nil), "events.Metadata")
	proto.RegisterType((*SessionMetadata)(nil), "events.SessionMetadata")
	proto.RegisterType((*ServerMetadata)(nil), "events.ServerMetadata")
	proto.RegisterMapType((map[string]string)(nil), "events.ServerMetadata.ServerLabelsEntry")
	proto.RegisterType((*ConnectionMetadata)(nil), "events.ConnectionMetadata")
	proto.RegisterType((*SessionStart)(nil), "events.SessionStart")
	proto.RegisterType((*SessionPrint)(nil), "events.SessionPrint")
	proto.RegisterType((*Resize)(nil), "events.Resize")
	proto.RegisterType((*SessionEnd)(nil), "events.SessionEnd")
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Index))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.ID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Time, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if len(m.SessionID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SessionID)))
		i += copy(dAtA[i:], m.SessionID)
	}
	if len(m.Login) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Login)))
		i += copy(dAtA[i:], m.Login)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServerID)))
		i += copy(dAtA[i:], m.ServerID)
	}
	if len(m.ServerHostname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ServerHostname)))
		i += copy(dAtA[i:], m.ServerHostname)
	}
	if len(m.ServerLabels) > 0 {
		for k, _ := range m.ServerLabels {
			dAtA[i] = 0x1a
			i++
			v := m.ServerLabels[k]
			mapSize := 1 + len(k) + sovEvents(uint64(len(k))) + 1 + len(v) + sovEvents(uint64(len(v)))
			i = encodeVarintEvents(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintEvents(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintEvents(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConnectionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.LocalAddr)))
		i += copy(dAtA[i:], m.LocalAddr)
	}
	if len(m.RemoteAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemoteAddr)))
		i += copy(dAtA[i:], m.RemoteAddr)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionStart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionStart) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n2, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n3, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n4, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n5, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.TerminalSize) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TerminalSize)))
		i += copy(dAtA[i:], m.TerminalSize)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionPrint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionPrint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n6, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.ChunkIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.ChunkIndex))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Bytes))
	}
	if m.DelayMilliseconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DelayMilliseconds))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resize) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n7, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n8, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n9, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n10, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.TerminalSize) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TerminalSize)))
		i += copy(dAtA[i:], m.TerminalSize)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SessionEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.Metadata.Size()))
	n11, err := m.Metadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.SessionMetadata.Size()))
	n12, err := m.SessionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x1a
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ConnectionMetadata.Size()))
	n13, err := m.ConnectionMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x22
	i++
	i = encodeVarintEvents(dAtA, i, uint64(m.ServerMetadata.Size()))
	n14, err := m.ServerMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.EnhancedRecording {
		dAtA[i] = 0x28
		i++
		if m.EnhancedRecording {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Interactive {
		dAtA[i] = 0x30
		i++
		if m.Interactive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Metadata) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovEvents(uint64(m.Index))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovEvents(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Login)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.ServerID)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ServerHostname)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.ServerLabels) > 0 {
		for k, v := range m.ServerLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovEvents(uint64(len(k))) + 1 + len(v) + sovEvents(uint64(len(v)))
			n += mapEntrySize + 1 + sovEvents(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectionMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionStart) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.TerminalSize)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionPrint) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.ChunkIndex != 0 {
		n += 1 + sovEvents(uint64(m.ChunkIndex))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Bytes != 0 {
		n += 1 + sovEvents(uint64(m.Bytes))
	}
	if m.DelayMilliseconds != 0 {
		n += 1 + sovEvents(uint64(m.DelayMilliseconds))
	}
	if m.Offset != 0 {
		n += 1 + sovEvents(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resize) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = len(m.TerminalSize)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SessionEnd) Size() (n int) {
	var l int
	_ = l
	l = m.Metadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.SessionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ConnectionMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.ServerMetadata.Size()
	n += 1 + l + sovEvents(uint64(l))
	if m.EnhancedRecording {
		n += 2
	}
	if m.Interactive {
		n += 2
	}
	if len(m.Participants) > 0 {
		for _, s := range m.Participants {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Login", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Login = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerHostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerHostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerLabels == nil {
				m.ServerLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthEvents
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEvents(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEvents
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServerLabels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionStart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionStart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionStart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionPrint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionPrint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionPrint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelayMilliseconds", wireType)
			}
			m.DelayMilliseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelayMilliseconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SessionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConnectionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServerMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnhancedRecording", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnhancedRecording = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interactive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Interactive = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptor_events_7c1964c2be3ba0f3) }

var fileDescriptor_events_7c1964c2be3ba0f3 = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x7a, 0x1d, 0xc7, 0xfb, 0xec, 0xb6, 0xc9, 0x60, 0x9a, 0x6d, 0xd4, 0x7a, 0x8c, 0x25,
	0x2a, 0x23, 0x15, 0x47, 0x18, 0xa8, 0x4a, 0x85, 0x54, 0xd8, 0x38, 0x52, 0x2d, 0xa5, 0x50, 0x4d,
	0xc2, 0xb9, 0xda, 0xec, 0x4e, 0x9c, 0x51, 0x77, 0x67, 0xac, 0x9d, 0x71, 0x84, 0xfb, 0x07, 0xb8,
	0x72, 0x42, 0xfc, 0x0a, 0x0e, 0xfc, 0x06, 0x90, 0x22, 0x71, 0xe9, 0x81, 0xf3, 0x02, 0xe1, 0xb6,
	0xbf, 0x02, 0xed, 0xec, 0x38, 0xbb, 0x4e, 0x38, 0xb5, 0x07, 0x2e, 0xdc, 0x76, 0xbf, 0xf7, 0xbd,
	0x37, 0xef, 0xfb, 0xe6, 0xbd, 0xb5, 0xa1, 0x4d, 0xcf, 0x28, 0x57, 0x72, 0x38, 0x4b, 0x84, 0x12,
	0xa8, 0x51, 0xbc, 0xed, 0x74, 0xa6, 0x62, 0x2a, 0x34, 0xb4, 0x9b, 0x3f, 0x15, 0xd1, 0x1d, 0x3c,
	0x15, 0x62, 0x1a, 0xd1, 0x5d, 0xfd, 0x76, 0x3c, 0x3f, 0xd9, 0x55, 0x2c, 0xa6, 0x52, 0xf9, 0xf1,
	0xac, 0x20, 0xf4, 0x7f, 0xb7, 0xa0, 0xf9, 0x8c, 0x2a, 0x3f, 0xf4, 0x95, 0x8f, 0xee, 0xc2, 0xfa,
	0x84, 0x87, 0xf4, 0x5b, 0xd7, 0xea, 0x59, 0x03, 0xdb, 0x6b, 0x64, 0x29, 0xae, 0x51, 0x46, 0x0a,
	0x10, 0xdd, 0x83, 0xfa, 0xd1, 0x62, 0x46, 0xdd, 0x5a, 0xcf, 0x1a, 0x38, 0x9e, 0x93, 0xa5, 0x78,
	0x5d, 0x9f, 0x4d, 0x34, 0x8c, 0xde, 0x83, 0xda, 0x64, 0xec, 0xda, 0x3a, 0xb8, 0x95, 0xa5, 0xf8,
	0xc6, 0x9c, 0x85, 0x0f, 0x44, 0xcc, 0x14, 0x8d, 0x67, 0x6a, 0x41, 0x6a, 0x93, 0x31, 0xba, 0x0f,
	0xf5, 0x3d, 0x11, 0x52, 0xb7, 0xae, 0x49, 0x28, 0x4b, 0xf1, 0xcd, 0x40, 0x84, 0xb4, 0xc2, 0xd2,
	0x71, 0xf4, 0x05, 0xd4, 0x8f, 0x58, 0x4c, 0xdd, 0xf5, 0x9e, 0x35, 0x68, 0x8d, 0x76, 0x86, 0x85,
	0x88, 0xe1, 0x52, 0xc4, 0xf0, 0x68, 0x29, 0xc2, 0xdb, 0x3c, 0x4f, 0xf1, 0x5a, 0x96, 0xe2, 0x7a,
	0xae, 0xeb, 0xfb, 0x3f, 0xb0, 0x45, 0x74, 0x66, 0xff, 0x27, 0x0b, 0x6e, 0x1d, 0x52, 0x29, 0x99,
	0xe0, 0x97, 0xea, 0x3e, 0x05, 0xe7, 0x2b, 0x3f, 0xa6, 0x72, 0xe6, 0x07, 0x54, 0x2b, 0x74, 0xbc,
	0xed, 0x2c, 0xc5, 0xef, 0xf0, 0x25, 0x58, 0xe9, 0xa3, 0x64, 0xa2, 0xf7, 0xc1, 0x31, 0x95, 0x26,
	0x63, 0xa3, 0x7d, 0x23, 0x4b, 0xb1, 0x2d, 0x59, 0x48, 0xca, 0x08, 0xc2, 0xb0, 0x7e, 0x20, 0xa6,
	0x8c, 0x1b, 0x07, 0xb4, 0x3d, 0x51, 0x0e, 0x90, 0x02, 0x47, 0x77, 0xa1, 0xfe, 0x8d, 0xa4, 0x89,
	0x11, 0xdf, 0xcc, 0x9b, 0x9e, 0x4b, 0x9a, 0x10, 0x8d, 0xf6, 0x7f, 0xae, 0xc1, 0xcd, 0x43, 0x9a,
	0x9c, 0xd1, 0xe4, 0xb2, 0xdf, 0x0f, 0xa0, 0x59, 0x20, 0x93, 0xb1, 0x69, 0xf7, 0x46, 0x96, 0x62,
	0x47, 0x6a, 0xec, 0x05, 0x0b, 0xc9, 0x65, 0x18, 0xed, 0x2f, 0x93, 0x9f, 0x0a, 0xa9, 0x72, 0x3d,
	0xa6, 0xd1, 0x7b, 0x59, 0x8a, 0xef, 0x98, 0x84, 0x53, 0x13, 0xaa, 0xa8, 0xbc, 0x92, 0x84, 0x62,
	0x68, 0x17, 0xc8, 0x81, 0x7f, 0x4c, 0x23, 0xe9, 0xda, 0x3d, 0x7b, 0xd0, 0x1a, 0x0d, 0x86, 0x66,
	0xe0, 0x56, 0xfb, 0x1b, 0x56, 0xa9, 0xfb, 0x5c, 0x25, 0x0b, 0x0f, 0x9b, 0xdb, 0xd8, 0x36, 0x47,
	0x46, 0x3a, 0x56, 0x39, 0x70, 0xa5, 0xfc, 0xce, 0x13, 0xd8, 0xba, 0x56, 0x03, 0x6d, 0x82, 0xfd,
	0x92, 0x2e, 0x0a, 0xc1, 0x24, 0x7f, 0x44, 0x1d, 0x58, 0x3f, 0xf3, 0xa3, 0xb9, 0xd1, 0x44, 0x8a,
	0x97, 0xc7, 0xb5, 0x47, 0x56, 0xff, 0x3b, 0x0b, 0xd0, 0x9e, 0xe0, 0x9c, 0x06, 0xaa, 0x7a, 0xd1,
	0x0f, 0xc1, 0x39, 0x10, 0x81, 0x1f, 0x7d, 0x19, 0x86, 0x89, 0x71, 0xce, 0xcd, 0x52, 0xdc, 0xf1,
	0xc3, 0x30, 0x19, 0x46, 0x79, 0xa4, 0x7a, 0xd3, 0x97, 0x54, 0xf4, 0x19, 0x00, 0xa1, 0xb1, 0x50,
	0x54, 0x27, 0x16, 0x0e, 0xde, 0xc9, 0x52, 0xfc, 0xae, 0x4e, 0x4c, 0x74, 0xa8, 0x92, 0x59, 0x21,
	0xf7, 0x7f, 0xab, 0xe5, 0xd6, 0xe9, 0x59, 0x38, 0x54, 0x7e, 0xa2, 0xd0, 0xe3, 0x72, 0xad, 0x74,
	0x0b, 0xad, 0xd1, 0xe6, 0xd2, 0xc6, 0x25, 0xee, 0xb5, 0x73, 0xbb, 0x5e, 0xa7, 0xd8, 0xca, 0x52,
	0xbc, 0x46, 0xca, 0x35, 0x7c, 0x02, 0x1b, 0xa6, 0x96, 0x6e, 0xa2, 0x35, 0xda, 0x2e, 0x6f, 0x60,
	0x65, 0xa4, 0xaf, 0x54, 0x58, 0x66, 0xa1, 0xcf, 0xa1, 0x51, 0x18, 0xab, 0x87, 0xb1, 0x35, 0xba,
	0xfd, 0xef, 0x37, 0x78, 0x25, 0xdd, 0xe4, 0xa0, 0xa7, 0x00, 0xa5, 0xa9, 0x7a, 0x5c, 0xf3, 0x1d,
	0x34, 0x15, 0xae, 0xdb, 0x7d, 0xa5, 0x4a, 0x25, 0x17, 0x3d, 0x84, 0xf6, 0x11, 0x4d, 0x62, 0xc6,
	0xfd, 0xe8, 0x90, 0xbd, 0x2a, 0xf6, 0xd9, 0xec, 0xbd, 0x64, 0xaf, 0xaa, 0x5e, 0xae, 0xf0, 0xfa,
	0x3f, 0x94, 0x6e, 0x3e, 0x4f, 0x18, 0x7f, 0x3b, 0x37, 0xef, 0x03, 0xec, 0x9d, 0xce, 0xf9, 0xcb,
	0xe2, 0xcb, 0x56, 0x2b, 0xbf, 0x6c, 0x01, 0x23, 0x95, 0x48, 0xfe, 0x79, 0x1b, 0xe7, 0xf5, 0x73,
	0xcb, 0xda, 0x9e, 0x73, 0x5e, 0x54, 0xb2, 0x3e, 0x24, 0x1a, 0xce, 0xf7, 0xdb, 0x5b, 0x28, 0x2a,
	0xb5, 0x21, 0x76, 0xb1, 0xdf, 0xc7, 0x39, 0x40, 0x0a, 0x1c, 0x7d, 0x02, 0x5b, 0x63, 0x1a, 0xf9,
	0x8b, 0x67, 0x2c, 0x8a, 0x98, 0xa4, 0x81, 0xe0, 0xa1, 0xd4, 0x8a, 0xcd, 0x71, 0xb1, 0x24, 0xd7,
	0x09, 0xe8, 0x01, 0x34, 0xbe, 0x3e, 0x39, 0x91, 0x54, 0xb9, 0x0d, 0x4d, 0xed, 0x64, 0x29, 0xde,
	0x14, 0x1a, 0xa9, 0xd8, 0x63, 0x38, 0xfd, 0x5f, 0x6b, 0xd0, 0x20, 0x34, 0xf7, 0xee, 0xbf, 0x1d,
	0xb0, 0xd5, 0x11, 0xb1, 0xdf, 0x62, 0x44, 0xca, 0x51, 0xad, 0xbf, 0xc1, 0xa8, 0xbe, 0xe9, 0x80,
	0xfd, 0x62, 0x03, 0x18, 0x2d, 0xfb, 0x3c, 0xfc, 0xdf, 0xcb, 0xdc, 0xcb, 0x31, 0x6c, 0xed, 0xf3,
	0x53, 0x9f, 0x07, 0x34, 0x24, 0x34, 0x10, 0x49, 0xc8, 0xf8, 0x54, 0x1b, 0xda, 0xf4, 0x6e, 0x67,
	0x29, 0x46, 0xd4, 0x04, 0x5f, 0x24, 0xcb, 0x28, 0xb9, 0x9e, 0x80, 0x3e, 0x82, 0xd6, 0x84, 0x2b,
	0x9a, 0xf8, 0x81, 0x62, 0x67, 0x54, 0x0f, 0x75, 0xd3, 0xbb, 0x95, 0xa5, 0xb8, 0xc5, 0x4a, 0x98,
	0x54, 0x39, 0xe8, 0x11, 0xb4, 0x9f, 0xfb, 0x89, 0x62, 0x01, 0x9b, 0xf9, 0x5c, 0x49, 0x77, 0xa3,
	0x67, 0x0f, 0x1c, 0xaf, 0x63, 0x7e, 0x4b, 0xda, 0xb3, 0x4a, 0x8c, 0xac, 0x30, 0xbd, 0xce, 0xf9,
	0x5f, 0xdd, 0xb5, 0xf3, 0x8b, 0xae, 0xf5, 0xfa, 0xa2, 0x6b, 0xfd, 0x79, 0xd1, 0xb5, 0x7e, 0xfc,
	0xbb, 0xbb, 0x76, 0xdc, 0xd0, 0xff, 0x13, 0x3e, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x58,
	0xc1, 0x77, 0x28, 0x09, 0x00, 0x00,
}
